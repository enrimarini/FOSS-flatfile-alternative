import tkinter as tk
import csv
from tkinter import filedialog, messagebox, ttk
import os

# Function to open a file dialog and select a CSV file
def select_file():
    filetypes = (('CSV files', '*.csv'), ('All files', '*.*'))
    filename = filedialog.askopenfilename(title='Open a file', initialdir='/', filetypes=filetypes)
    if filename:
        file_path.set(filename)

# Function to confirm the file selection and proceed
def confirm_selection():
    if file_path.get():
        # File path is set, proceed with parsing (functionality to be added later)
        # For now, just show a confirmation message
        messagebox.showinfo('Confirmation', 'You have selected the file: ' + file_path.get())
        prepare_data_type_selection()
    else:
        messagebox.showwarning('Warning', 'Please select a CSV file first.')

# Function to read CSV headers and create data type selection interface
def prepare_data_type_selection():
    if file_path.get():
        try:
            # Read the CSV file and extract headers
            with open(file_path.get(), newline='') as csvfile:
                reader = csv.reader(csvfile)
                headers = next(reader)

            # Clear previous data types frame contents
            for widget in frame_data_types.winfo_children():
                widget.destroy()

            # Create label and dropdown for each header
            for i, header in enumerate(headers):
                label_header = tk.Label(frame_data_types, text=header, anchor='w')
                label_header.grid(row=i, column=0, sticky='ew', padx=5)

                data_type_var = tk.StringVar(value='string')  # default value
                data_type_selection = ttk.Combobox(frame_data_types, textvariable=data_type_var,
                                                   values=('datetime', 'string', 'integer', 'float', 'boolean'))
                data_type_selection.grid(row=i, column=1, padx=5, pady=5)
                data_types[header] = data_type_var

            # Add confirm button
            button_confirm_data_types = tk.Button(frame_data_types, text='Confirm Data Types', command=confirm_data_types)
            button_confirm_data_types.grid(row=len(headers), column=0, columnspan=2, pady=10)

        except Exception as e:
            messagebox.showerror('Error', f'An error occurred: {e}')

# Function to confirm the data type selections
def confirm_data_types():
    # Placeholder for functionality to be added later
    # For now, just show a message with selected data types
    selected_data_types = {header: var.get() for header, var in data_types.items()}
    messagebox.showinfo('Data Types Selected', str(selected_data_types))
    # Proceed with the next step of database creation


# Create the main application window
app = tk.Tk()
app.title('CSV to SQLite Converter')

# StringVar to store the path of the selected file
file_path = tk.StringVar(app)
data_types = {}  # Dictionary to store the data types selected for each column

# Frame for the file selection
frame_file_selection = tk.Frame(app, pady=10)
frame_file_selection.pack(fill='x', padx=15)

# Label, entry and button for file selection
label_file = tk.Label(frame_file_selection, text='Select CSV File:', anchor='w')
label_file.pack(side='left', padx=5)

entry_file = tk.Entry(frame_file_selection, textvariable=file_path, width=50)
entry_file.pack(side='left', expand=True, fill='x', padx=5)

button_browse = tk.Button(frame_file_selection, text='Browse', command=select_file)
button_browse.pack(side='right', padx=5)

# Frame for the confirm button
frame_confirm = tk.Frame(app, pady=10)
frame_confirm.pack(fill='x', padx=15)

button_confirm = tk.Button(frame_confirm, text='Confirm Selection', command=confirm_selection)
button_confirm.pack(side='right', padx=5)

# Frame for the data type selection (This should be defined here)
frame_data_types = tk.Frame(app)
frame_data_types.pack(fill='x', expand=True, padx=15)

# Run the application
app.mainloop()
